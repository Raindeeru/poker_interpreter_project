Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> COMMAND U
Rule 2     S -> COMMAND
Rule 3     U -> NUMBER
Rule 4     U -> ITEM_ID
Rule 5     U -> CARD_ID A
Rule 6     U -> CARD_ID
Rule 7     U -> CARD_ID TO P
Rule 8     A -> CARD_ID A
Rule 9     A -> CARD_ID
Rule 10    P -> ACTION
Rule 11    P -> ACTION C
Rule 12    P -> ACTION E
Rule 13    C -> CHANGE_KEY OF CARD_ID K
Rule 14    C -> CHANGE_KEY OF CARD_ID
Rule 15    K -> TO R
Rule 16    R -> NUMBER
Rule 17    R -> SUIT
Rule 18    R -> ALPHA_VAL
Rule 19    E -> F WITH F
Rule 20    F -> NUMBER
Rule 21    F -> CARD_ID

Terminals, with rules where they appear

ACTION               : 10 11 12
ALPHA_VAL            : 18
CARD_ID              : 5 6 7 8 9 13 14 21
CHANGE_KEY           : 13 14
COMMAND              : 1 2
ITEM_ID              : 4
NUMBER               : 3 16 20
OF                   : 13 14
SUIT                 : 17
TO                   : 7 15
WITH                 : 19
error                : 

Nonterminals, with rules where they appear

A                    : 5 8
C                    : 11
E                    : 12
F                    : 19 19
K                    : 13
P                    : 7
R                    : 15
S                    : 0
U                    : 1

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . COMMAND U
    (2) S -> . COMMAND

    COMMAND         shift and go to state 2

    S                              shift and go to state 1

state 1

    (0) S' -> S .



state 2

    (1) S -> COMMAND . U
    (2) S -> COMMAND .
    (3) U -> . NUMBER
    (4) U -> . ITEM_ID
    (5) U -> . CARD_ID A
    (6) U -> . CARD_ID
    (7) U -> . CARD_ID TO P

    $end            reduce using rule 2 (S -> COMMAND .)
    NUMBER          shift and go to state 4
    ITEM_ID         shift and go to state 5
    CARD_ID         shift and go to state 6

    U                              shift and go to state 3

state 3

    (1) S -> COMMAND U .

    $end            reduce using rule 1 (S -> COMMAND U .)


state 4

    (3) U -> NUMBER .

    $end            reduce using rule 3 (U -> NUMBER .)


state 5

    (4) U -> ITEM_ID .

    $end            reduce using rule 4 (U -> ITEM_ID .)


state 6

    (5) U -> CARD_ID . A
    (6) U -> CARD_ID .
    (7) U -> CARD_ID . TO P
    (8) A -> . CARD_ID A
    (9) A -> . CARD_ID

    $end            reduce using rule 6 (U -> CARD_ID .)
    TO              shift and go to state 9
    CARD_ID         shift and go to state 7

    A                              shift and go to state 8

state 7

    (8) A -> CARD_ID . A
    (9) A -> CARD_ID .
    (8) A -> . CARD_ID A
    (9) A -> . CARD_ID

    $end            reduce using rule 9 (A -> CARD_ID .)
    CARD_ID         shift and go to state 7

    A                              shift and go to state 10

state 8

    (5) U -> CARD_ID A .

    $end            reduce using rule 5 (U -> CARD_ID A .)


state 9

    (7) U -> CARD_ID TO . P
    (10) P -> . ACTION
    (11) P -> . ACTION C
    (12) P -> . ACTION E

    ACTION          shift and go to state 12

    P                              shift and go to state 11

state 10

    (8) A -> CARD_ID A .

    $end            reduce using rule 8 (A -> CARD_ID A .)


state 11

    (7) U -> CARD_ID TO P .

    $end            reduce using rule 7 (U -> CARD_ID TO P .)


state 12

    (10) P -> ACTION .
    (11) P -> ACTION . C
    (12) P -> ACTION . E
    (13) C -> . CHANGE_KEY OF CARD_ID K
    (14) C -> . CHANGE_KEY OF CARD_ID
    (19) E -> . F WITH F
    (20) F -> . NUMBER
    (21) F -> . CARD_ID

    $end            reduce using rule 10 (P -> ACTION .)
    CHANGE_KEY      shift and go to state 15
    NUMBER          shift and go to state 18
    CARD_ID         shift and go to state 16

    C                              shift and go to state 13
    E                              shift and go to state 14
    F                              shift and go to state 17

state 13

    (11) P -> ACTION C .

    $end            reduce using rule 11 (P -> ACTION C .)


state 14

    (12) P -> ACTION E .

    $end            reduce using rule 12 (P -> ACTION E .)


state 15

    (13) C -> CHANGE_KEY . OF CARD_ID K
    (14) C -> CHANGE_KEY . OF CARD_ID

    OF              shift and go to state 19


state 16

    (21) F -> CARD_ID .

    WITH            reduce using rule 21 (F -> CARD_ID .)
    $end            reduce using rule 21 (F -> CARD_ID .)


state 17

    (19) E -> F . WITH F

    WITH            shift and go to state 20


state 18

    (20) F -> NUMBER .

    WITH            reduce using rule 20 (F -> NUMBER .)
    $end            reduce using rule 20 (F -> NUMBER .)


state 19

    (13) C -> CHANGE_KEY OF . CARD_ID K
    (14) C -> CHANGE_KEY OF . CARD_ID

    CARD_ID         shift and go to state 21


state 20

    (19) E -> F WITH . F
    (20) F -> . NUMBER
    (21) F -> . CARD_ID

    NUMBER          shift and go to state 18
    CARD_ID         shift and go to state 16

    F                              shift and go to state 22

state 21

    (13) C -> CHANGE_KEY OF CARD_ID . K
    (14) C -> CHANGE_KEY OF CARD_ID .
    (15) K -> . TO R

    $end            reduce using rule 14 (C -> CHANGE_KEY OF CARD_ID .)
    TO              shift and go to state 24

    K                              shift and go to state 23

state 22

    (19) E -> F WITH F .

    $end            reduce using rule 19 (E -> F WITH F .)


state 23

    (13) C -> CHANGE_KEY OF CARD_ID K .

    $end            reduce using rule 13 (C -> CHANGE_KEY OF CARD_ID K .)


state 24

    (15) K -> TO . R
    (16) R -> . NUMBER
    (17) R -> . SUIT
    (18) R -> . ALPHA_VAL

    NUMBER          shift and go to state 26
    SUIT            shift and go to state 27
    ALPHA_VAL       shift and go to state 28

    R                              shift and go to state 25

state 25

    (15) K -> TO R .

    $end            reduce using rule 15 (K -> TO R .)


state 26

    (16) R -> NUMBER .

    $end            reduce using rule 16 (R -> NUMBER .)


state 27

    (17) R -> SUIT .

    $end            reduce using rule 17 (R -> SUIT .)


state 28

    (18) R -> ALPHA_VAL .

    $end            reduce using rule 18 (R -> ALPHA_VAL .)

